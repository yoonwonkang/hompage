<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 맘대로 이름을 정해도 되지만 이름에 일관성을 부여하여 유지보수를 편하게 하기 위해 이렇게 한다 -->
<mapper namespace="net.bitacademy.java41.dao.MemberMapper">
	<!-- 메소드의 이름을 id로 사용 -->
	<select id="getMember" parameterType="map" resultType="Member">
		select EMAIL,MNAME as name,TEL,LEVEL as memLevel 
		 from SPMS_MEMBS 
		 where EMAIL=#{email} and PWD=#{password}
	</select> 
	
	<select id="listPhoto" parameterType="string" resultType="Photo">
		select INO as imageNo,EMAIL,IMGURL as fileName from SPMS_MEMIMG where EMAIL=#{value}
	</select>
	
	<select id="list" resultType="Member">
		select EMAIL,MNAME as name,TEL,BLOG from SPMS_MEMBS order by MNAME
	</select>
	
	<select id="get" resultType="Member" parameterType="string">
		select EMAIL,PWD as password,MNAME as name,TEL,BLOG,REG_DATE as regDate,DET_ADDR as detailAddr,TAG,LEVEL as memLevel
		from SPMS_MEMBS where EMAIL=#{value}
	</select>
	
	<select id="emailCheck" resultType="string" parameterType="string">
		select EMAIL FROM SPMS_MEMBS where EMAIL=#{value}
	</select>
	
	<insert id="add" parameterType="Member">
		insert into SPMS_MEMBS(
		 EMAIL,MNAME,PWD,TEL,BLOG,REG_DATE,UPDATE_DATE,DET_ADDR,TAG,LEVEL) 
		 values(#{email},#{name},#{password},#{tel},#{blog},now(),now(),#{detailAddr},#{tag},#{memLevel}) 
	</insert>
		
	<insert id="addPhoto" parameterType="map">
		insert into SPMS_MEMIMG(EMAIL,IMGURL)
		 values(#{email},#{path})
	</insert>
	
	<update id="changePassword" parameterType="map">
		update SPMS_MEMBS set  PWD=#{newPassword},UPDATE_DATE=now() where EMAIL=#{email} and PWD=#{oldPassword}
	</update>
	
	<update id="changeMyInfo" parameterType="Member">
		update SPMS_MEMBS set MNAME=#{name},TEL=#{tel},BLOG=#{blog},DET_ADDR=#{detailAddr},UPDATE_DATE=now(),TAG=#{tag} where EMAIL=#{email}
	</update>
	
	<update id="change" parameterType="Member">
		update SPMS_MEMBS set MNAME=#{name},TEL=#{tel},BLOG=#{blog},DET_ADDR=#{detailAddr},UPDATE_DATE=now(),TAG=#{tag} where EMAIL=#{email}
	</update>
	
	<update id="updateImg" parameterType="map">
		update SPMS_MEMIMG set IMGURL=#{path} where EMAIL=#{email}
	</update>
	
	<update id="alterDelete">
		alter table SPMS_MEMIMG add constraint foreign key (email) REFERENCES SPMS_MEMBS (email) ON DELETE CASCADE ON UPDATE CASCADE
	</update>
	
	<delete id="memberRemove" parameterType="string">
		delete from SPMS_MEMBS where EMAIL =#{email}
	</delete>
	
	<delete id="memImgRemove" parameterType="string">
		delete from SPMS_MEMIMG where EMAIL =#{email}
	</delete>
</mapper>
